# launcher.py
# - Ask WR+ and WR- folders
# - Optional: remember paths (stored in .launcher_prefs.json)
# - Ask mice names (space-separated, Enter = all)
# - Scan both folders, filter by mice (startswith)
# - Write ONLY these in src/share.py:
#     WR_PLUS_PATH, WR_MINUS_PATH, MATCHED_FILES_WR_PLUS, MATCHED_FILES_WR_MINUS
# - Fancy UI with Rich if available; avoids Rich markup issues.

import os
import sys
import json
import subprocess
import importlib.util
from pathlib import Path
from typing import List, Optional
import gradio as gr

ROOT = Path(__file__).resolve().parent
os.chdir(ROOT)
SHARE = ROOT / "src" / "share.py"
PREFS = ROOT / ".launcher_prefs.json"

# -------- Optional pretty UI (rich) ----------
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.prompt import Prompt, Confirm
    from rich.table import Table
    from rich.text import Text  # use Text to avoid markup parsing
    RICH = True
    console = Console()
except Exception:
    RICH = False
    console = None

def rprint(*args, **kwargs):
    (console.print if RICH else print)(*args, **kwargs)

def rprompt(msg: str, default: Optional[str] = None) -> str:
    if RICH:
        # DO NOT use square brackets around default (causes markup parsing)
        shown = Text(f"{msg} (default: {default})") if default else Text(msg)
        return Prompt.ask(shown, default=default or "").strip()
    else:
        shown = f"{msg} [{default}]: " if default else f"{msg}: "
        return (input(shown) or (default or "")).strip()

def rconfirm(msg: str, default: bool = True) -> bool:
    if RICH:
        return Confirm.ask(msg, default=default)
    ans = input(msg + (" [Y/n]: " if default else " [y/N]: ")).strip().lower()
    return (ans in {"y", "yes", "o", "oui"}) if ans else default

# -------- Defaults handling ----------
def load_defaults() -> dict:
    """Defaults priority: .launcher_prefs.json > src/share.py > empty"""
    d = {"wr_plus": "", "wr_minus": ""}
    if PREFS.exists():
        try:
            j = json.loads(PREFS.read_text(encoding="utf-8"))
            d["wr_plus"] = j.get("wr_plus", "")
            d["wr_minus"] = j.get("wr_minus", "")
            return d
        except Exception:
            pass
    if SHARE.exists():
        try:
            spec = importlib.util.spec_from_file_location("share", str(SHARE))
            mod = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(mod)
            d["wr_plus"] = getattr(mod, "WR_PLUS_PATH", "")
            d["wr_minus"] = getattr(mod, "WR_MINUS_PATH", "")
        except Exception:
            pass
    return d

def save_defaults(wr_plus: str, wr_minus: str):
    PREFS.write_text(json.dumps({"wr_plus": wr_plus, "wr_minus": wr_minus}, indent=2), encoding="utf-8")

# -------- FS helpers ----------
def ask_dir(label: str, default_path: str) -> str:
    while True:
        p = Path(rprompt(label, default=default_path)).expanduser()
        if p.is_dir():
            return str(p.resolve())
        rprint("[red]❌ Folder not found:[/red] {}".format(p) if RICH else f"❌ Folder not found: {p}")

def list_files_recursive(folder: Path) -> List[Path]:
    out: List[Path] = []
    seen = set()
    for p in folder.rglob("*"):
        if p.is_file():
            rp = p.resolve()
            s = str(rp)
            if s not in seen:
                seen.add(s)
                out.append(rp)
    return out

def filter_by_mice(files: List[Path], mice: List[str]) -> List[Path]:
    if not mice:  # all
        return files
    wanted = [m.strip().casefold() for m in mice if m.strip()]
    keep: List[Path] = []
    seen = set()
    for f in files:
        name = f.name.casefold()
        if any(name.startswith(w) for w in wanted):
            s = str(f)
            if s not in seen:
                seen.add(s)
                keep.append(f)
    return keep

# -------- share.py writer ----------
def write_share_py(wr_plus: str, wr_minus: str,
                   matched_plus: List[Path], matched_minus: List[Path]):
    content = (
        "# Auto-generated by launcher.py — will be overwritten\n"
        f"WR_PLUS_PATH = {wr_plus!r}\n"
        f"WR_MINUS_PATH = {wr_minus!r}\n"
        f"MATCHED_FILES_WR_PLUS = {[str(p) for p in matched_plus]!r}\n"
        f"MATCHED_FILES_WR_MINUS = {[str(p) for p in matched_minus]!r}\n"
    )
    SHARE.write_text(content, encoding="utf-8")

# -------- Pretty bits ----------
def header():
    if RICH:
        rprint(Panel.fit(
            "[bold cyan]NWB Launcher[/bold cyan]\n[dim]WR+ / WR- paths • mice filter[/dim]",
            border_style="cyan"
        ))
    else:
        print("="*60 + "\nNWB Launcher — WR+ / WR- • mice filter\n" + "="*60)

def summary(wr_plus: str, wr_minus: str, mice: List[str],
            n_plus: int, n_minus: int):
    if RICH:
        t = Table(title="Summary")
        t.add_column("Key", style="bold")
        t.add_column("Value")
        t.add_row("WR+ path", wr_plus)
        t.add_row("WR- path", wr_minus)
        t.add_row("Mice", "all" if not mice else " ".join(mice))
        t.add_row("Files WR+", str(n_plus))
        t.add_row("Files WR-", str(n_minus))
        rprint(t)
    else:
        print("\n--- Summary ---")
        print(f"WR+ : {wr_plus}")
        print(f"WR- : {wr_minus}")
        print(f"Mice : {'all' if not mice else ' '.join(mice)}")
        print(f"Files WR+ : {n_plus} | Files WR- : {n_minus}")

# -------- Main ----------
def main():
    header()

    defaults = load_defaults()
    wr_plus  = ask_dir("WR+ folder path", defaults["wr_plus"])
    wr_minus = ask_dir("WR- folder path", defaults["wr_minus"])

    if rconfirm("Remember these paths for next launches?", default=True):
        save_defaults(wr_plus, wr_minus)

    mice_line = rprompt("Mouse names (space-separated, Enter = all)", default="")
    mice = [m for m in mice_line.split() if m]

    # Scan
    files_plus  = list_files_recursive(Path(wr_plus))
    files_minus = list_files_recursive(Path(wr_minus))

    # Filter
    matched_plus  = filter_by_mice(files_plus, mice)
    matched_minus = filter_by_mice(files_minus, mice)

    if not matched_plus and not matched_minus:
        rprint("[yellow]No files found for this selection.[/yellow]" if RICH else "⚠️ No files found.")
        sys.exit(2)

    # Persist for the app
    write_share_py(wr_plus, wr_minus, matched_plus, matched_minus)

    summary(wr_plus, wr_minus, mice, len(matched_plus), len(matched_minus))

    rprint("[green]✅ Launching app…[/green]" if RICH else "✅ Launching app…")
    subprocess.run([sys.executable, "-m", "src.app"], check=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        rprint("\n[red]Interrupted by user.[/red]" if RICH else "\nInterrupted by user.")
        sys.exit(130)
